//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/Mouse.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Mouse : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Mouse()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Mouse"",
    ""maps"": [
        {
            ""name"": ""Mouse Actions"",
            ""id"": ""ebf58f52-a9fb-4850-aa31-22b948bbe617"",
            ""actions"": [
                {
                    ""name"": ""Left Click"",
                    ""type"": ""Button"",
                    ""id"": ""b2249667-f69e-4ca8-bda4-a2b9319ba829"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Hold"",
                    ""type"": ""Button"",
                    ""id"": ""56a940f3-0155-45a9-98f7-1eafb69d7ccf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomInOut"",
                    ""type"": ""Value"",
                    ""id"": ""cf30d7d9-bf42-45e5-8cc3-a94165414469"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""fire"",
                    ""type"": ""Button"",
                    ""id"": ""a9977b0e-7cbf-44f9-b279-be4848e710b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6875d4b0-e8d9-4b71-8351-5627e1261a89"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Left Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""528b34be-d96d-4ed7-8655-b33b953f9a7b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Left Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da067277-0abe-43f7-9eb4-2cb5b153b41f"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""ZoomInOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30ab4708-4440-4a5d-9075-e02abbea1afa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""148f8395-fc66-40a2-a84b-de38199f08bd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Mouse Actions
        m_MouseActions = asset.FindActionMap("Mouse Actions", throwIfNotFound: true);
        m_MouseActions_LeftClick = m_MouseActions.FindAction("Left Click", throwIfNotFound: true);
        m_MouseActions_LeftHold = m_MouseActions.FindAction("Left Hold", throwIfNotFound: true);
        m_MouseActions_ZoomInOut = m_MouseActions.FindAction("ZoomInOut", throwIfNotFound: true);
        m_MouseActions_fire = m_MouseActions.FindAction("fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse Actions
    private readonly InputActionMap m_MouseActions;
    private IMouseActionsActions m_MouseActionsActionsCallbackInterface;
    private readonly InputAction m_MouseActions_LeftClick;
    private readonly InputAction m_MouseActions_LeftHold;
    private readonly InputAction m_MouseActions_ZoomInOut;
    private readonly InputAction m_MouseActions_fire;
    public struct MouseActionsActions
    {
        private @Mouse m_Wrapper;
        public MouseActionsActions(@Mouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_MouseActions_LeftClick;
        public InputAction @LeftHold => m_Wrapper.m_MouseActions_LeftHold;
        public InputAction @ZoomInOut => m_Wrapper.m_MouseActions_ZoomInOut;
        public InputAction @fire => m_Wrapper.m_MouseActions_fire;
        public InputActionMap Get() { return m_Wrapper.m_MouseActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActionsActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActionsActions instance)
        {
            if (m_Wrapper.m_MouseActionsActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnLeftClick;
                @LeftHold.started -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnLeftHold;
                @LeftHold.performed -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnLeftHold;
                @LeftHold.canceled -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnLeftHold;
                @ZoomInOut.started -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnZoomInOut;
                @ZoomInOut.performed -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnZoomInOut;
                @ZoomInOut.canceled -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnZoomInOut;
                @fire.started -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnFire;
                @fire.performed -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnFire;
                @fire.canceled -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_MouseActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @LeftHold.started += instance.OnLeftHold;
                @LeftHold.performed += instance.OnLeftHold;
                @LeftHold.canceled += instance.OnLeftHold;
                @ZoomInOut.started += instance.OnZoomInOut;
                @ZoomInOut.performed += instance.OnZoomInOut;
                @ZoomInOut.canceled += instance.OnZoomInOut;
                @fire.started += instance.OnFire;
                @fire.performed += instance.OnFire;
                @fire.canceled += instance.OnFire;
            }
        }
    }
    public MouseActionsActions @MouseActions => new MouseActionsActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    public interface IMouseActionsActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnLeftHold(InputAction.CallbackContext context);
        void OnZoomInOut(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
